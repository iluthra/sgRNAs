#October. 6, 2016
#This version will show total mismatches (1,2,3) for each guide
#this works for multiple guides and generates a nice output file
import os
import sys
import argparse
import tables
import string
import numpy as np
dna_comp = None

def comp(seq_str):
    """complements the provided DNA sequence and returns it"""
    global dna_comp

    if dna_comp is None:
        dna_comp = string.maketrans("ATCGMRWSYKNatcgmrwsykn",
                                    "TAGCKYWSRMNtagckywsrmn")
    return seq_str.translate(dna_comp)


def revcomp(seq_str):
    """returns reverse complement of provided DNA sequence"""
    return comp(seq_str)[::-1]
    

def str_from_nparray(vals):
    """converts a numpy array into a sequence string"""
    return "".join(chr(x) for x in vals)


def get_seq(chrom,start,end,strand):
     
    seq_h5 = tables.openFile("/iblm/netapp/data1/external/GRC37/GRC37.h5", "r")
    #strand = "+"


    if chrom not in seq_h5.root:
        known_chrom = [node.name for node in seq_h5.root]
        raise ValueError("unknown chromosome %s, possible chromosomes are: "
                         + ",".join(known_chrom))

    
    # numpy array representation of sequence and convert to string
    chrom_node = seq_h5.getNode("/%s" %chrom)
    np_seq = chrom_node[start-1:end]
    seq_str = str_from_nparray(np_seq)

    if strand == "-":
        # reverse-complement sequence
        seq_str = revcomp(seq_str)

    
    return seq_str

    # write header and sequence
    #sys.stdout.write(">%s:%d-%d(%s)\n" % (options.chrom, options.start,
                                        #options.end, options.strand))
    #sys.stdout.write("%s\n" % seq_str)

def main():
    inChrom = "chr1"
    inStart = 1000000
    inEnd = 1000040
    inStrand = "+"
    fastainput = open("Input.fasta", 'w')
    
    inputRegion = get_seq(inChrom, inStart, inEnd, inStrand)
    print inputRegion
    fastainput.write(">" + inChrom + '\n')
    fastainput.write(inputRegion)
    fastainput.close()
    f = open("Input.fasta", "r")
    #declare chr start and end for region that you want to extract guides from
    
    file = f.readlines()
    #Sguide = []
    #guideList = []

    #create output file
    outfile = open('GuideRNAs','w')
    outfile2 = open('FQGuides.fq' , 'w')
    outfile3 = open('Database.txt', 'w')


    outfile3.write('Location' + '\t' + '\t' + '\t' + 'gRNA' + '\t' + '\t' + '\t' + 'Direction' + '\t' + '#other perfect aligns' + '\t' +  'Specificity Score' + '\t' + '%GC Content' + '\t' + '#MM1'+ '\t' + '#MM2'+ '\t' + '#MM3' +  '\n')

    #can change seq and header to lists if there are more than one header in fasta file with several sequences
    #declare empty lists
    sequence = []
    header = []
    #list of guide RNA
    guideRna = []
    #has list with RNAs with proper direction
    guideRnaOutput = []
    guideRnaPam = []
    #string declaration
    seq = ""
    header = ""
    GC = []

    #store all the headers in a list
    for f in file:

        if f.startswith('>'):
            header = header + f
            header = header.splitlines()[0]
        #get ride of new line charaters and spaces
        else:
            f = f.replace(" ", "")
            f = f.replace("\n", "")
            seq = seq + f


    #print header.splitlines()[0]
    #print seq

    #print header
    #print len(seq)
    i = 0
    #make it all upper case, easier to parse
    seq = seq.upper()
    location = []
    direction = []


    #don't need to check last base, looking for 2 consecutive GG
    while i < (len(seq)-1):

        if seq[i] == "G":

            if seq[i+1] == "G":
                #only if we are at least 23 bases in can we store a guide RNA, so check and store in list
                if i > 21:

                    guideRna.append(seq[i-21:i-1])
                    guideRnaOutput.append(seq[i-21:i-1])
                    guideRnaPam.append(seq[i-21:i-1] + " " + seq[i-1:i+2])
                    start = (i - 21) + inStart
                    end = (i - 1) + inStart
                    location.append(str(start) + '-' + str(end))
                    direction.append('fwd')
        #increment counter
        i = i + 1




    ## add loop to look for CCN start once found take reverse complement
    w = 0
    forward = ""
    while w < (len(seq)-1):

        if seq[w] == "C":

            if seq[w+1] == "C":

                #only if we are at least 23 bases in can we store a guide RNA, so check and store in list
                if (w+23) >= (len(seq)-w) & (len(seq)-w) >= 23:
                    forward = seq[w+3: w+23]
                    #print forward
                    CODE={'A':'T','T':'A','C':'G','G':'C'} 
                    minus_seq=''
                    for c in forward:
                        minus_seq=minus_seq+CODE[c]
                        reverse_seq=minus_seq[::-1]
                    guideRnaOutput.append(reverse_seq)
                    guideRna.append(forward)
                    guideRnaPam.append(seq[w:w+3] + " " + seq[w+3:w+23])
                    start = w+3+inStart
                    end = w+23+inStart
                    location.append(str(start) + '-' + str(end))
                    direction.append('rev')
        #increment counter
        w = w + 1


    print guideRna
    print guideRnaPam
    print guideRnaOutput
    print location
    print direction



    #write to file
    #need to add chromosome start and end position to file
    j = 0
    outfile.write(header)
    while j<len(guideRna):

        outfile.write(guideRna[j] + '\n')
        outfile2.write('@' + str(j) + '\n')
        outfile2.write(guideRna[j] + '\n')
        outfile2.write('+' + '\n')
        outfile2.write('IIIIIIIIIIIIIIIIIIII' + '\n')


        #print guideRna[j]
        #print guideRna[j].count("G")
        #print guideRna[j].count("C")
        totalgc = guideRnaOutput[j].count("G") + guideRnaOutput[j].count("C")
        #print totalgc
        gccontent = (totalgc / float(len(guideRna[j]))) * 100.00
        #print gccontent
        GC.append(gccontent)
        j = j+1


    #if we don't close and reopen FQGuides.fq we cannot excute the commands since FQGuides.fq was only a write file
    outfile2.close()
    open("FQGuides.fq", "r")

    #call bwa aligner from this code and get information from the sam file

    cmd = 'bwa aln -o 0 -n 3 -N -t 5 hg37.fa FQGuides.fq > aln.sai'
    os.system(cmd)

    cmd2 = 'bwa samse -n 8000 hg37.fa aln.sai FQGuides.fq > aln.sam'
    os.system(cmd2)

    cmd3 = 'samtools view aln.sam'
    os.system(cmd3)

    #should this be a .sam or .txt??
    cmd4 = 'cat aln.sam | grep -v ^@ > alnNoHeader.txt'
    os.system(cmd4)


    #f2 = open("alnNoHeader.txt", "r")
    #import re

    #for line in f2:
        #try to see if you can figure out how to extract 20M
     #   infoList1 = re.findall('(chr[\dMXYIVLR]+),([+-])(\d+),\d+M,(\d)', line)

    #print infoList1

    import subprocess
    f2 = open("alnNoHeader.txt", "r")
    import re
    infoListFull = []


    i = 0
    for line in f2:
        line.split()
        infoListFull.append(line)



    alnList = []
    q = 0
    
    while q < len(infoListFull):
        temp = infoListFull[q]
        alnList = re.findall('(chr[\dMXYIVLR]+),([+-])(\d+),\d+M,(\d)', temp)
        #this give list for the 1st GUIDE
        #print alnList
        infoList1 = alnList

    #print alnLists

        i = 0

        #print len(infoList1)
        #print infoList1[0]

        #removes all reference sequences that match perfectly somewhere else == 0 mismatches
        #should we just delete that gRNA if it matches anywhere more than once???????????????
        numPerfAlns = 0
        mm1 = 0
        mm2 = 0
        mm3 = 0
        while i < len(infoList1):
            if infoList1[i][3] == '0':
                del infoList1[i]
                numPerfAlns = numPerfAlns + 1
                i = i - 1
            if infoList1[i][3] == '1':
                mm1 = mm1 + 1
                i = i +1
            if infoList1[i][3] == '2':
                mm2 = mm2 + 1
                i = i +1
            if infoList1[i][3] == '3':
                mm3 = mm3 + 1
                i = i +1

            #i = i +1

        #print infoList1
        #print len(infoList1)


        listIndex = 0
        Shitlist = []
        #print len(infoList1)
        while listIndex < len(infoList1):


            #tmp = os.popen('python get_seq.py /iblm/netapp/data1/external/GRC37/GRC37.h5 %s %s %s --strand %s' %(infoList1[listIndex][0] , infoList1[listIndex][2], int(infoList1[listIndex][2]) + 19  , infoList1[listIndex][1])).read()

            #tmp = get_seq("chr3", 1, 100 , "+")
            refSEQ = get_seq(infoList1[listIndex][0], int(infoList1[listIndex][2]), int(infoList1[listIndex][2]) + 19 , infoList1[listIndex][1])

            #print refSEQ

        #extract just the sequence not chromosome : start and end position
            #refSEQ = tmp[-21:]
            #print refSEQ
            testguide = guideRna[q]
            #print testguide
            len1 = len(refSEQ)
            len2 = len(guideRna[q])
            mismatchPos = []
            m = 0

            while m < len(refSEQ):

                if refSEQ[m] != testguide[m]:
                    mismatchPos.append(m)
                    m = m + 1
                else:
                    m = m +1


            #print mismatchPos



        #calculate mismatch position





        #for each read that the guide allined to we need what position the mismatches occured at compared to the guide we had
        #using this information calculate SHit for each read that gRNA aligned at and using all the reads calculate Sguide

            W = [0, 0, 0.014, 0, 0, 0.395, 0.317, 0, 0.389, 0.079, 0.445,
                    0.508, 0.613, 0.851, 0.731, 0.828, 0.615, 0.804, 0.685, 0.583]

            d = 0
            l = 20 - 1


            k = 0

            if len(mismatchPos) == 3:
                d = ((mismatchPos[2] - mismatchPos[1]) + (mismatchPos[1] - mismatchPos[0])) / (len(mismatchPos) - 1 )

                #SHit = (1 - W[mismatchPos[2]])*(1 - W[mismatchPos[1]])*(1 - W[mismatchPos[0]])*(1/(((1-d/l)*4)+1))*(1.0/9.0)
                a = (1 - W[mismatchPos[2]])*(1 - W[mismatchPos[1]])*(1 - W[mismatchPos[0]])
                b = (1.0/(((1-d*1.0/l)*4.0)+1))
                c = 1.0/9.0
                SHit = a*b*c
                #print SHit
                Shitlist.append(SHit)
                listIndex = listIndex + 1
            if len(mismatchPos) == 2:
                d = ((mismatchPos[1] - mismatchPos[0])) / (len(mismatchPos) - 1 )
                #SHit = (1 - W[mismatchPos[1]])*(1 - W[mismatchPos[0]])*(1/(((1-d/l)*4)+1))*(1/4)
                a =  (1 - W[mismatchPos[1]])*(1 - W[mismatchPos[0]])
                b = (1/(((1-d*1.0/l)*4.0)+1))
                c = 1.0/4.0
                SHit = a*b*c
                Shitlist.append(SHit)
                #print SHit
                listIndex = listIndex + 1
            if len(mismatchPos) == 1:
                #CHECK that d = 0
                d = 0
                SHit = (1 - W[mismatchPos[0]])*(1/((1-d*1.0/l)*4)+1)
                Shitlist.append(SHit)
                #print SHit
                #k = k+1
                listIndex = listIndex + 1
            


        #print Shitlist
        Sguide = 100 / (1 + sum(Shitlist))
        #print "SGUIDE for this gRNA is"
        #print Sguide
        #guideList[q] = Sguide

        outfile3.write(header + ':' +  location[q] + '\t' + '\t' + guideRnaOutput[q] + '\t'  + direction[q] + '\t' + '\t' +  str(numPerfAlns) + '\t' + '\t' + '\t' + str(Sguide) + '\t' + '\t' + str(GC[q]) + '\t' +  '\t' + str(mm1) + '\t' + str(mm2) + '\t' + str(mm3) + '\n')
        q = q +1
        


    print "End of program"
    
    #print guideList
    #print Sguide


        
    
main()
